{'currentTime': {'word': 'currentTime', 'menu': 'no documentation found for currentTime'}, 'getEnv': {'word': 'getEnv', 'menu': 'builtins                       s', 'info': 'getEnv returns the value of the environment variable s, or an empty string if the variable doesn’t exist. This function should be used with care, as it can introduce all sorts of nasty environment dependencies in your Nix expression.', 'dup': 1}, 'sub': {'word': 'sub', 'menu': 'builtins                       e1 e2', 'info': 'Return the difference between the integers e1 and e2.', 'dup': 1}, 'addErrorContext': {'word': 'addErrorContext', 'menu': 'no documentation found for addErrorContext'}, 'genericClosure': {'word': 'genericClosure', 'menu': 'no documentation found for genericClosure'}, 'add': {'word': 'add', 'menu': 'builtins                       e1 e2', 'info': 'Return the sum of the integers e1 and e2.', 'dup': 1}, 'unsafeDiscardOutputDependency': {'word': 'unsafeDiscardOutputDependency', 'menu': 'no documentation found for unsafeDiscardOutputDependency'}, 'functionArgs': {'word': 'functionArgs', 'menu': 'no documentation found for functionArgs'}, 'map': {'word': 'map', 'menu': 'builtins                       (concat "foo") ["bar" "bla" "abc"]', 'info': '', 'dup': 1}, 'isInt': {'word': 'isInt', 'menu': 'builtins                       e', 'info': 'Return true if e evaluates to a int, and false otherwise.', 'dup': 1}, 'builtins': {'word': 'builtins', 'menu': 'no documentation found for builtins'}, 'readFile': {'word': 'readFile', 'menu': 'builtins                       path', 'info': 'Return the contents of the file path as a string.', 'dup': 1}, 'attrNames': {'word': 'attrNames', 'menu': 'builtins                       attrs', 'info': 'Return the names of the attributes in the attribute set attrs in a sorted list. For instance, builtins.attrNames {y = 1; x = "foo";} evaluates to ["x" "y"]. There is no built-in function attrValues, but you can easily define it yourself:', 'dup': 1}, 'unsafeDiscardStringContext': {'word': 'unsafeDiscardStringContext', 'menu': 'no documentation found for unsafeDiscardStringContext'}, 'stringLength': {'word': 'stringLength', 'menu': 'builtins                       e', 'info': 'Return the length of the string e. If e is not a string, evaluation is aborted.', 'dup': 1}, 'tail': {'word': 'tail', 'menu': 'builtins                       list', 'info': 'Return the second to last elements of a list; abort evaluation if the argument isn’t a list or is an empty list.', 'dup': 1}, 'getAttr': {'word': 'getAttr', 'menu': 'builtins                       s attrs', 'info': 'getAttr returns the attribute named s from the attribute set attrs. Evaluation aborts if the attribute doesn’t exist. This is a dynamic version of the . operator, since s is an expression rather than an identifier.', 'dup': 1}, 'toString': {'word': 'toString', 'menu': 'builtins                       e', 'info': 'Convert the expression e to a string. e can be a string (in which case toString is a no-op) or a path (e.g., toString /foo/bar yields "/foo/bar".', 'dup': 1}, 'hasAttr': {'word': 'hasAttr', 'menu': 'builtins                       s attrs', 'info': 'hasAttr returns true if the attribute set attrs has an attribute named s, and false otherwise. This is a dynamic version of the ? operator, since s is an expression rather than an identifier.', 'dup': 1}, 'baseNameOf': {'word': 'baseNameOf', 'menu': 'builtins                       s', 'info': 'Return the base name of the string s, that is, everything following the final slash in the string. This is similar to the GNU basename command.', 'dup': 1}, 'isList': {'word': 'isList', 'menu': 'builtins                       e', 'info': 'Return true if e evaluates to a list, and false otherwise.', 'dup': 1}, 'derivation': {'word': 'derivation', 'menu': 'builtins                       that adds a default value for system and always uses Bash as', 'info': '', 'dup': 1}, 'true': {'word': 'true', 'menu': 'builtins                       but the db4 argument set to null, then the evaluation fails.', 'info': '', 'dup': 1}, 'head': {'word': 'head', 'menu': 'builtins                       list', 'info': 'Return the first element of a list; abort evaluation if the argument isn’t a list or is an empty list. You can test whether a list is empty by comparing it with [].', 'dup': 1}, 'currentSystem': {'word': 'currentSystem', 'menu': 'no documentation found for currentSystem'}, 'lessThan': {'word': 'lessThan', 'menu': 'builtins                       e1 e2', 'info': 'Return true if the integer e1 is less than the integer e2, and false otherwise. Evaluation aborts if either e1 or e2 does not evaluate to an integer.', 'dup': 1}, 'tryEval': {'word': 'tryEval', 'menu': 'no documentation found for tryEval'}, 'substring': {'word': 'substring', 'menu': 'builtins                       start len s', 'info': 'Return the substring of s from character position start (zero-based) up to but not including start + len. If start is greater than the length of the string, an empty string is returned, and if start + len lies beyond the end of the string, only the substring up to the end of the string is returned. start must be non-negative.', 'dup': 1}, 'import': {'word': 'import', 'menu': 'builtins                       path', 'info': 'Load, parse and return the Nix expression in the file path. Evaluation aborts if the file doesn’t exist or contains an incorrect Nix expression. import implements Nix’s module system: you can put any Nix expression (such as an attribute set or a function) in a separate file, and use it from Nix expressions in other files.', 'dup': 1}, 'isAttrs': {'word': 'isAttrs', 'menu': 'builtins                       e', 'info': 'Return true if e evaluates to an attribute set, and false otherwise.', 'dup': 1}, 'compareVersions': {'word': 'compareVersions', 'menu': 'builtins                       s1 s2', 'info': 'Compare two strings representing versions and return -1 if version s1 is older than version s2, 0 if they are the same, and 1 if s1 is newer than s2. The version comparison algorithm is the same as the one used by [274]nix-env -u.', 'dup': 1}, 'isFunction': {'word': 'isFunction', 'menu': 'builtins                       e', 'info': 'Return true if e evaluates to a function, and false otherwise.', 'dup': 1}, 'storePath': {'word': 'storePath', 'menu': 'no documentation found for storePath'}, 'derivationStrict': {'word': 'derivationStrict', 'menu': 'no documentation found for derivationStrict'}, 'toXML': {'word': 'toXML', 'menu': 'builtins                       e', 'info': 'Return a string containing an XML representation of e. The main application for toXML is to communicate information with the builder in a more structured format than plain environment variables.', 'dup': 1}, 'isString': {'word': 'isString', 'menu': 'builtins                       e', 'info': 'Return true if e evaluates to a string, and false otherwise.', 'dup': 1}, 'div': {'word': 'div', 'menu': 'builtins                       e1 e2', 'info': 'Return the quotient of the integers e1 and e2.', 'dup': 1}, 'isBool': {'word': 'isBool', 'menu': 'builtins                       e', 'info': 'Return true if e evaluates to a bool, and false otherwise.', 'dup': 1}, 'null': {'word': 'null', 'menu': 'no documentation found for null'}, 'filterSource': {'word': 'filterSource', 'menu': 'builtins                       e1 e2', 'info': 'This function allows you to copy sources into the Nix store while filtering certain files. For instance, suppose that you want to use the directory source-dir as an input to a Nix expression, e.g.', 'dup': 1}, 'pathExists': {'word': 'pathExists', 'menu': 'builtins                       path', 'info': 'Return true if the path path exists, and false otherwise. One application of this function is to conditionally include a Nix expression containing user configuration:', 'dup': 1}, 'dirOf': {'word': 'dirOf', 'menu': 'builtins                       s', 'info': 'Return the directory part of the string s, that is, everything before the final slash in the string. This is similar to the GNU dirname command.', 'dup': 1}, 'parseDrvName': {'word': 'parseDrvName', 'menu': 'builtins                       s', 'info': 'Split the string s into a package name and version. The package name is everything up to but not including the first dash followed by a digit, and the version is everything following that dash. The result is returned in an attribute set {name, version}. Thus, builtins.parseDrvName "nix-0.12pre12876" returns {name = "nix"; version = "0.12pre12876";}.', 'dup': 1}, 'trace': {'word': 'trace', 'menu': 'builtins                       e1 e2', 'info': 'Evaluate e1 and print its abstract syntax representation on standard error. Then return e2. This function is useful for debugging.', 'dup': 1}, 'removeAttrs': {'word': 'removeAttrs', 'menu': 'builtins                       attrs list', 'info': 'Remove the attributes listed in list from the attribute set attrs. The attributes don’t have to exist in attrs. For instance,', 'dup': 1}, 'toPath': {'word': 'toPath', 'menu': 'builtins                       s', 'info': 'Convert the string value s into a path value. The string s must represent an absolute path (i.e., must start with /). The path need not exist. The resulting path is canonicalised, e.g., builtins.toPath "//foo/xyzzy/../bar/" returns /foo/bar.', 'dup': 1}, 'false': {'word': 'false', 'menu': 'builtins                       otherwise. Evaluation aborts if either e1 or e2 does not', 'info': '', 'dup': 1}, 'throw': {'word': 'throw', 'menu': 'builtins                       s', 'info': 'Throw an error message s. This usually aborts Nix expression evaluation, but in nix-env -qa and other commands that try to evaluate a set of derivations to get information about those derivations, a derivation that throws an error is silently skipped (which is not the case for abort).', 'dup': 1}, 'length': {'word': 'length', 'menu': 'builtins                       e', 'info': 'Return the length of the list e.', 'dup': 1}, 'isNull': {'word': 'isNull', 'menu': 'builtins                       e', 'info': 'Return true if e evaluates to null, and false otherwise.', 'dup': 1}, 'intersectAttrs': {'word': 'intersectAttrs', 'menu': 'builtins                       e1 e2', 'info': 'Return an attribute set consisting of the attributes in the set e2 that also exist in the set e1.', 'dup': 1}, 'abort': {'word': 'abort', 'menu': 'builtins                       s', 'info': 'Abort Nix expression evaluation, print error message s.', 'dup': 1}, 'toFile': {'word': 'toFile', 'menu': 'builtins                       name s', 'info': 'Store the string s in a file in the Nix store and return its path. The file has suffix name. This file can be used as an input to derivations. One application is to write builders “inline”. For instance, the following Nix expression combines [276]Example 5.1, “Nix expression for GNU Hello (default.nix)” and [277]Example 5.2, “Build script for GNU Hello (builder.sh)” into one file:', 'dup': 1}, 'listToAttrs': {'word': 'listToAttrs', 'menu': 'builtins                       e', 'info': 'Construct an attribute set from a list specifying the names and values of each attribute. Each element of the list should be an attribute set consisting of a string-valued attribute name specifying the name of the attribute, and an attribute value specifying its value. Example:', 'dup': 1}, 'mul': {'word': 'mul', 'menu': 'builtins                       e1 e2', 'info': 'Return the product of the integers e1 and e2.', 'dup': 1}}
